// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

static const int maxNumberOfSettingsLayers = 8;

float4 worldpos = float4(0, 0, 0, 0);
float chunkRes = 512.0;
float chunkSize = 256.0;

float numThreads = 10;


int octa[maxNumberOfSettingsLayers];
float multi[maxNumberOfSettingsLayers];
float ampl[maxNumberOfSettingsLayers];
float lacu[maxNumberOfSettingsLayers];
float pers[maxNumberOfSettingsLayers];
float sizeScalex[maxNumberOfSettingsLayers];
float sizeScalez[maxNumberOfSettingsLayers];
float MultiplicationOfFinal[maxNumberOfSettingsLayers];
float subtraction[maxNumberOfSettingsLayers];
int blendmode[maxNumberOfSettingsLayers];
float offsetX[maxNumberOfSettingsLayers];
float offsetY[maxNumberOfSettingsLayers];
float offsetZ[maxNumberOfSettingsLayers];
float minimal[maxNumberOfSettingsLayers];
float maximal[maxNumberOfSettingsLayers];
float minHeight[maxNumberOfSettingsLayers];
float maxHeight[maxNumberOfSettingsLayers];

int numberoflayers = 1;


//float noiseLayeredMap[maxResolutionTerrain];
//float lastnoiseLayeredMap[maxResolutionTerrain];

struct meshData
{
    float3 vert;
    float3 normals;
    float2 uvs;
};
struct _tri
{
    int tris1, tris2, tris3, tris4, tris5, tris6;
};

RWStructuredBuffer<meshData> mesh;
AppendStructuredBuffer<_tri> tris;

//Snoise
float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
    const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);

// First corner
    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);

// Other corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    float3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
    i = mod289(i);
    float4 p = permute(permute(permute(
             i.z + float4(0.0, i1.z, i2.z, 1.0))
           + i.y + float4(0.0, i1.y, i2.y, 1.0))
           + i.x + float4(0.0, i1.x, i2.x, 1.0));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    float3 ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z * ns.z); //  mod(p,7*7)

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_); // mod(j,N)

    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

  //float4 s0 = float4(lessThan(b0,0.0))*2.0 - 1.0;
  //float4 s1 = float4(lessThan(b1,0.0))*2.0 - 1.0;
    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, float4(0, 0, 0, 0));

    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);

//Normalise gradients
    float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

// Mix final noise value
    float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),
                                dot(p2, x2), dot(p3, x3)));
}
//end
float coherentNoise(float3 xyz, int octaves = 1, int multiplier = 25, float amplitude = 0.5f, float lacunarity = 2, float persistence = 0.9f)
{
    float3 v3 = xyz / multiplier;
    float val = 0;
    for (int n = 0; n < octaves; n++)
    {
        val += snoise(v3) * amplitude;
        v3 *= lacunarity;
        amplitude *= persistence;
    }
    return val;
}

int innerResurse = 2;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int index = id.y * chunkRes + id.x;
    
    int j = 0;
    for (int x = 0; x < innerResurse; x++)
    {
        for (int y = 0; y < innerResurse; y++)
        {
            int vi = x * innerResurse + y;
            vi += index;
            meshData meshh = mesh[vi];
            float xCord = 0;
            float yCord = 0;
        
            float3 p = float3((xCord + offsetX[j]) * sizeScalex[j], offsetY[j], (yCord + offsetZ[j]) * sizeScalez[j]);
            float noiseFloat = coherentNoise(p, octa[j], multi[j], ampl[j], lacu[j], pers[j]);
    //meshh.vert.y = noiseFloat * 100;
            noiseFloat = (noiseFloat + 0.5);
        
            noiseFloat *= MultiplicationOfFinal[j];
            noiseFloat -= subtraction[j];

            if (noiseFloat < minimal[j] && blendmode[j] != 4)
            {
                noiseFloat = minimal[j];
                blendmode[j] = 2;
            }
            if (noiseFloat > maximal[j] && blendmode[j] != 4)
            {
                noiseFloat = maximal[j];
                blendmode[j] = 2;
            }
        
       /*
    switch (blendmode[j])
    {
        case 0:
            noiseFloat *= meshh.vert.y;

            break;
        case 1:
            noiseFloat = meshh.vert.y - noiseFloat;

            break;
        case 2:
            noiseFloat += meshh.vert.y;

            break;
        case 3:
            noiseFloat = meshh.vert.y / noiseFloat;
            break;
        case 4:
            if (meshh.vert.y < maximal[j] && meshh.vert.y > minimal[j])
            {
                noiseFloat += meshh.vert.y;
            }
            else
            {
                noiseFloat = meshh.vert.y;
            }
            break;
        default:
            noiseFloat = noiseFloat;
            break;
    }
    */
                //layers[j].blendmode = layers[j].blendmode;
            meshh.vert.y = noiseFloat;
            meshh.vert.xz = float2(xCord, yCord);
            meshh.normals = float3(0, 1, 0);
            meshh.uvs = float2(xCord / chunkSize, yCord / chunkSize);
    
            if (vi % chunkRes != 0)
            {
                _tri tr;
                tr.tris1 = vi;
                tr.tris2 = vi + 1;
                tr.tris3 = vi + chunkRes;
                tr.tris4 = vi + 1;
                tr.tris5 = vi + chunkRes + 1;
                tr.tris6 = vi + chunkRes;
                tris.Append(tr);
                
            }
            mesh[vi] = meshh;
                            //noiseLayeredMap[i] = coherentNoise(xCord, 0, yCord, octaves, multiplier, amplitute, lacunarity, persistance) * MultiplicationOfFinal;
        }
    }
    //meshh.vert.xz = float2(id.x, id.y);
    
    
    
    /*
    tris[ti] = vi;
    tris[ti + 3] = tris[ti + 2] = vi + chunkRes + 1;
    tris[ti + 4] = tris[ti + 1] = vi + 1;
    tris[ti + 5] = vi + chunkRes + 2;
                        
                       
                        
*/
    
    

}