// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

float4 worldpos = float4(0, 0, 0, 0);
float chunkRes = float(2048);
float chunkSize = float(256);

float numThreads = 10;


int octa[] = { 0};
float mult[] = { 0};
float ampl[] = { 0 };
float lacu[] = { 0 };
float pers[] = { 0 };
float sizeScalex[] = { 0 };
float sizeScalez[] = { 0 };
float MultiplicationOfFinal[] = { 0 };
float subtraction[] = { 0 };
int blendmode[] = { 0 };
float offsetX[] = { 0 };
float offsetY[] = { 0 };
float offsetZ[] = { 0 };
float minimal[] = { 0 };
float maximal[] = { 0 };
float minHeight[] = { 0 };
float maxHeight[] = { 0 };

int numberoflayers = 1;


float noiseLayeredMap[] = { 0 };
float lastnoiseLayeredMap[] = { 0 };



struct meshData
{
    float3 vert;
    float3 normals;
    float2 uvs;
};
struct _tri
{
    int tris1, tris2, tris3, tris4, tris5, tris6;
};

RWStructuredBuffer<meshData> mesh;
AppendStructuredBuffer<_tri> tris;

//Snoise
float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(float4 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}

float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(float3 v)
{
    const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);

// First corner
    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);

// Other corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    float3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
    i = mod289(i);
    float4 p = permute(permute(permute(
             i.z + float4(0.0, i1.z, i2.z, 1.0))
           + i.y + float4(0.0, i1.y, i2.y, 1.0))
           + i.x + float4(0.0, i1.x, i2.x, 1.0));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    float3 ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z * ns.z); //  mod(p,7*7)

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_); // mod(j,N)

    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

  //float4 s0 = float4(lessThan(b0,0.0))*2.0 - 1.0;
  //float4 s1 = float4(lessThan(b1,0.0))*2.0 - 1.0;
    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, float4(0, 0, 0, 0));

    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);

//Normalise gradients
    float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

// Mix final noise value
    float4 m = max(0.5 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 105.0 * dot(m * m, float4(dot(p0, x0), dot(p1, x1),
                                dot(p2, x2), dot(p3, x3)));
}
//end
float coherentNoise(float3 xyz, int octaves = 1, int multiplier = 25, float amplitude = 0.5f, float lacunarity = 2, float persistence = 0.9f)
{
    float3 v3 = xyz / multiplier;
    float val = 0;
    for (int n = 0; n < octaves; n++)
    {
        val += snoise(v3) * amplitude;
        v3 *= lacunarity;
        amplitude *= persistence;
    }
    return val;
}




[numthreads(10, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    for (int j = 0; j < numberoflayers; j++)
    {
        int i = 0;
        for (int x = id.x * chunkSize + id.y; x <= chunkSize * numThreads; x++)
        {
            for (int z = id.x * chunkSize + id.y; z <= chunkSize * numThreads; z++)
            {

                            //float xCord = ((((float)x) / (float)chunkRes) * (float)chunkSize) + _pos.X;
                float xCord = (((float) x / (float) chunkRes) * (float) chunkSize) + ((float) worldpos.x * chunkSize);
                            //float yCord = ((((float)z) / (float)chunkRes) * (float)chunkSize) + _pos.Z;
                float yCord = (((float) z / (float) chunkRes) * (float) chunkSize) + ((float) worldpos.z * chunkSize);
                float3 p = float3((xCord + offsetX[j]) * sizeScalex[j], offsetY[j], (yCord + offsetZ[j]) * sizeScalez[j]);
                float noiseFloat = coherentNoise(p, octa[j], mult[j], ampl[j], lacu[j], pers[j]);
                noiseFloat = (noiseFloat + 1) / 2;

                noiseFloat *= MultiplicationOfFinal[j];
                noiseFloat -= subtraction[j];


                if (noiseFloat < minimal[j] && blendmode[j] != 4)
                {
                    noiseFloat = minimal[j];
                    blendmode[j] = 2;
                }
                if (noiseFloat > maximal[j] && blendmode[j] != 4)
                {
                    noiseFloat = maximal[j];
                    blendmode[j] = 2;
                }



                switch (blendmode[j])
                {
                    case 0:
                        noiseFloat *= lastnoiseLayeredMap[i];

                        break;
                    case 1:
                        noiseFloat = lastnoiseLayeredMap[i] - noiseFloat;

                        break;
                    case 2:
                        noiseFloat += lastnoiseLayeredMap[i];

                        break;
                    case 3:
                        noiseFloat = lastnoiseLayeredMap[i] / noiseFloat;
                        break;
                    case 4:
                        if (lastnoiseLayeredMap[i] < maximal[j] && lastnoiseLayeredMap[i] > minimal[j])
                        {
                            noiseFloat += lastnoiseLayeredMap[i];
                        }
                        else
                        {
                            noiseFloat = lastnoiseLayeredMap[i];
                        }
                        break;
                    default:
                        break;
                }
                //layers[j].blendmode = layers[j].blendmode;
                noiseLayeredMap[i] = noiseFloat;
                lastnoiseLayeredMap[i] = noiseFloat;

                            //noiseLayeredMap[i] = coherentNoise(xCord, 0, yCord, octaves, multiplier, amplitute, lacunarity, persistance) * MultiplicationOfFinal;
                i++;
            }
        }
    }

    mesh[0].vert = float3(((float) id.x / (float) chunkRes) * (float) chunkSize, noiseLayeredMap[id.x * chunkSize + id.y] + float(20), ((float) id.y / (float) chunkRes) * (float) chunkSize);
    mesh[id.x * chunkSize + id.y].normals = float3(0, 1, 0);
    mesh[id.x * chunkSize + id.y].uvs = float2((float) id.x / (float) chunkSize, (float) id.y / (float) chunkSize);
    _tri tr;
    tr.tris6 = id.x * chunkSize + id.y + chunkRes + 2;
    tr.tris5 = tr.tris2 = id.x * chunkSize + id.y + 1;
    tr.tris4 = tr.tris3 = id.x * chunkSize + id.y + chunkRes + 1;
    tr.tris1 = id.x * chunkSize + id.y;
    tris.Append(tr);
}